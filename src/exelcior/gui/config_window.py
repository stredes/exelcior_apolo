"""
Ventana de configuraci√≥n avanzada para Exelcior Apolo
Permite configurar par√°metros espec√≠ficos por modo de operaci√≥n
"""

import tkinter as tk
from tkinter import ttk, messagebox
import json
from pathlib import Path
from typing import Dict, List, Any


class ConfigurationWindow(tk.Toplevel):
    """Ventana de configuraci√≥n avanzada"""
    
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.title("‚öôÔ∏è Configuraci√≥n Avanzada - Exelcior Apolo")
        self.geometry("900x700")
        self.configure(bg="#F9FAFB")
        
        # Variables de configuraci√≥n
        self.config_data = self._load_config()
        self.current_mode = "listados"
        
        # Crear interfaz
        self._create_widgets()
        self._load_current_config()
        
        # Centrar ventana
        self._center_window()
        
        # Hacer modal
        self.transient(parent)
        self.grab_set()
    
    def _load_config(self) -> Dict[str, Any]:
        """Cargar configuraci√≥n desde archivo"""
        config_file = Path("config/user_config.json")
        
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                pass
        
        # Configuraci√≥n por defecto
        return {
            "fedex": {
                "eliminar": [
                    "errors", "senderAccountNumber", "poNumber", "senderLine1",
                    "senderPostcode", "totalShipmentWeight", "weightUnits",
                    "recipientPostcode", "creationDate", "recipientPhoneExtension"
                ],
                "sumar": ["numberOfPackages"],
                "mantener_formato": ["masterTrackingNumber"],
                "start_row": 0,
                "vista_previa_fuente": 10,
            },
            "urbano": {
                "eliminar": [
                    "AGENCIA", "SHIPPER", "FECHA CHK", "DIAS", 
                    "ESTADO", "SERVICIO", "PESO"
                ],
                "sumar": ["PIEZAS"],
                "mantener_formato": [],
                "start_row": 2,
                "nombre_archivo_digitos": [9, 10],
                "vista_previa_fuente": 10,
            },
            "listados": {
                "eliminar": [
                    "Moneda", "Fecha doc.", "RUT", "Vendedor", 
                    "Glosa", "Total", "Tipo cambio"
                ],
                "sumar": [],
                "mantener_formato": [],
                "start_row": 0,
                "vista_previa_fuente": 10,
            },
        }
    
    def _save_config(self):
        """Guardar configuraci√≥n a archivo"""
        config_file = Path("config/user_config.json")
        config_file.parent.mkdir(exist_ok=True)
        
        try:
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config_data, f, indent=4, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("Error", f"No se pudo guardar la configuraci√≥n:\n{e}")
    
    def _center_window(self):
        """Centrar ventana en la pantalla"""
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f"{width}x{height}+{x}+{y}")
    
    def _create_widgets(self):
        """Crear widgets de la interfaz"""
        # Frame principal
        main_frame = ttk.Frame(self, padding=20)
        main_frame.pack(fill="both", expand=True)
        
        # T√≠tulo
        title_label = tk.Label(
            main_frame,
            text="‚öôÔ∏è Configuraci√≥n Avanzada",
            font=("Segoe UI", 16, "bold"),
            bg="#F9FAFB",
            fg="#111827"
        )
        title_label.pack(pady=(0, 20))
        
        # Selector de modo
        self._create_mode_selector(main_frame)
        
        # Notebook para pesta√±as de configuraci√≥n
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill="both", expand=True, pady=10)
        
        # Pesta√±as
        self._create_columns_tab()
        self._create_processing_tab()
        self._create_display_tab()
        
        # Botones
        self._create_buttons(main_frame)
    
    def _create_mode_selector(self, parent):
        """Crear selector de modo"""
        mode_frame = ttk.LabelFrame(parent, text="üéØ Modo de Configuraci√≥n", padding=10)
        mode_frame.pack(fill="x", pady=(0, 10))
        
        self.mode_var = tk.StringVar(value=self.current_mode)
        
        modes = [
            ("urbano", "üè¢ Urbano - Archivos de 9 d√≠gitos"),
            ("fedex", "üì¶ FedEx - Env√≠os internacionales"),
            ("listados", "üìã Listados - Documentos de venta")
        ]
        
        for mode, description in modes:
            rb = ttk.Radiobutton(
                mode_frame,
                text=description,
                variable=self.mode_var,
                value=mode,
                command=self._on_mode_change
            )
            rb.pack(anchor="w", pady=2)
    
    def _create_columns_tab(self):
        """Crear pesta√±a de configuraci√≥n de columnas"""
        columns_frame = ttk.Frame(self.notebook)
        self.notebook.add(columns_frame, text="üìä Columnas")
        
        # Frame principal con scroll
        canvas = tk.Canvas(columns_frame, bg="#F9FAFB")
        scrollbar = ttk.Scrollbar(columns_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Columnas a eliminar
        eliminar_frame = ttk.LabelFrame(
            scrollable_frame, 
            text="üóëÔ∏è Columnas a Eliminar", 
            padding=10
        )
        eliminar_frame.pack(fill="x", padx=10, pady=5)
        
        self.eliminar_text = tk.Text(
            eliminar_frame,
            height=8,
            font=("Consolas", 9),
            wrap="word"
        )
        self.eliminar_text.pack(fill="x")
        
        # Columnas para sumar
        sumar_frame = ttk.LabelFrame(
            scrollable_frame,
            text="‚ûï Columnas para Sumar",
            padding=10
        )
        sumar_frame.pack(fill="x", padx=10, pady=5)
        
        self.sumar_text = tk.Text(
            sumar_frame,
            height=4,
            font=("Consolas", 9),
            wrap="word"
        )
        self.sumar_text.pack(fill="x")
        
        # Columnas a mantener formato
        formato_frame = ttk.LabelFrame(
            scrollable_frame,
            text="üîí Mantener Formato Original",
            padding=10
        )
        formato_frame.pack(fill="x", padx=10, pady=5)
        
        self.formato_text = tk.Text(
            formato_frame,
            height=4,
            font=("Consolas", 9),
            wrap="word"
        )
        self.formato_text.pack(fill="x")
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def _create_processing_tab(self):
        """Crear pesta√±a de configuraci√≥n de procesamiento"""
        processing_frame = ttk.Frame(self.notebook)
        self.notebook.add(processing_frame, text="‚öôÔ∏è Procesamiento")
        
        # Fila de inicio
        start_row_frame = ttk.LabelFrame(
            processing_frame,
            text="üìç Fila de Inicio de Datos",
            padding=15
        )
        start_row_frame.pack(fill="x", padx=20, pady=10)
        
        tk.Label(
            start_row_frame,
            text="Especifica desde qu√© fila comenzar a leer los datos (0 = primera fila):",
            font=("Segoe UI", 10)
        ).pack(anchor="w")
        
        self.start_row_var = tk.IntVar()
        start_row_spin = ttk.Spinbox(
            start_row_frame,
            from_=0,
            to=50,
            textvariable=self.start_row_var,
            width=10,
            font=("Segoe UI", 11)
        )
        start_row_spin.pack(anchor="w", pady=(5, 0))
        
        # Configuraci√≥n espec√≠fica para Urbano
        self.urbano_frame = ttk.LabelFrame(
            processing_frame,
            text="üè¢ Configuraci√≥n Urbano",
            padding=15
        )
        self.urbano_frame.pack(fill="x", padx=20, pady=10)
        
        tk.Label(
            self.urbano_frame,
            text="D√≠gitos v√°lidos para nombres de archivo (separados por coma):",
            font=("Segoe UI", 10)
        ).pack(anchor="w")
        
        self.digitos_var = tk.StringVar()
        digitos_entry = ttk.Entry(
            self.urbano_frame,
            textvariable=self.digitos_var,
            font=("Segoe UI", 11),
            width=20
        )
        digitos_entry.pack(anchor="w", pady=(5, 0))
        
        tk.Label(
            self.urbano_frame,
            text="Ejemplo: 9,10 (archivos de 9 o 10 d√≠gitos)",
            font=("Segoe UI", 9),
            fg="#6B7280"
        ).pack(anchor="w", pady=(2, 0))
    
    def _create_display_tab(self):
        """Crear pesta√±a de configuraci√≥n de visualizaci√≥n"""
        display_frame = ttk.Frame(self.notebook)
        self.notebook.add(display_frame, text="üé® Visualizaci√≥n")
        
        # Tama√±o de fuente
        font_frame = ttk.LabelFrame(
            display_frame,
            text="üî§ Tama√±o de Fuente",
            padding=15
        )
        font_frame.pack(fill="x", padx=20, pady=10)
        
        tk.Label(
            font_frame,
            text="Tama√±o de fuente para vista previa de datos:",
            font=("Segoe UI", 10)
        ).pack(anchor="w")
        
        self.font_size_var = tk.IntVar()
        font_spin = ttk.Spinbox(
            font_frame,
            from_=8,
            to=24,
            textvariable=self.font_size_var,
            width=10,
            font=("Segoe UI", 11)
        )
        font_spin.pack(anchor="w", pady=(5, 0))
        
        # Vista previa
        preview_frame = ttk.LabelFrame(
            display_frame,
            text="üëÅÔ∏è Vista Previa",
            padding=15
        )
        preview_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        self.preview_text = tk.Text(
            preview_frame,
            height=10,
            font=("Consolas", 10),
            bg="#1F2937",
            fg="#E5E7EB",
            wrap="word"
        )
        self.preview_text.pack(fill="both", expand=True)
        
        # Contenido de vista previa
        preview_content = '''
üß¨ Configuraci√≥n Actual:

üìä Modo: {mode}
üìç Fila inicio: {start_row}
üóëÔ∏è Columnas a eliminar: {eliminar_count}
‚ûï Columnas a sumar: {sumar_count}
üîí Mantener formato: {formato_count}
üî§ Tama√±o fuente: {font_size}

‚úÖ La configuraci√≥n se aplicar√° autom√°ticamente
   al procesar archivos en este modo.
        '''
        
        self.preview_text.insert("1.0", preview_content)
        self.preview_text.config(state="disabled")
    
    def _create_buttons(self, parent):
        """Crear botones de acci√≥n"""
        button_frame = ttk.Frame(parent)
        button_frame.pack(fill="x", pady=(20, 0))
        
        # Botones a la izquierda
        left_buttons = ttk.Frame(button_frame)
        left_buttons.pack(side="left")
        
        ttk.Button(
            left_buttons,
            text="üîÑ Restablecer",
            command=self._reset_to_default
        ).pack(side="left", padx=(0, 10))
        
        ttk.Button(
            left_buttons,
            text="üìã Copiar Config",
            command=self._copy_config
        ).pack(side="left", padx=(0, 10))
        
        # Botones a la derecha
        right_buttons = ttk.Frame(button_frame)
        right_buttons.pack(side="right")
        
        ttk.Button(
            right_buttons,
            text="‚ùå Cancelar",
            command=self.destroy
        ).pack(side="left", padx=(0, 10))
        
        ttk.Button(
            right_buttons,
            text="üíæ Guardar",
            command=self._save_and_close
        ).pack(side="left")
    
    def _on_mode_change(self):
        """Manejar cambio de modo"""
        self.current_mode = self.mode_var.get()
        self._load_current_config()
        self._update_preview()
        
        # Mostrar/ocultar configuraci√≥n espec√≠fica de Urbano
        if self.current_mode == "urbano":
            self.urbano_frame.pack(fill="x", padx=20, pady=10)
        else:
            self.urbano_frame.pack_forget()
    
    def _load_current_config(self):
        """Cargar configuraci√≥n del modo actual"""
        config = self.config_data.get(self.current_mode, {})
        
        # Cargar columnas a eliminar
        eliminar = config.get("eliminar", [])
        self.eliminar_text.delete("1.0", tk.END)
        self.eliminar_text.insert("1.0", "\n".join(eliminar))
        
        # Cargar columnas a sumar
        sumar = config.get("sumar", [])
        self.sumar_text.delete("1.0", tk.END)
        self.sumar_text.insert("1.0", "\n".join(sumar))
        
        # Cargar columnas de formato
        formato = config.get("mantener_formato", [])
        self.formato_text.delete("1.0", tk.END)
        self.formato_text.insert("1.0", "\n".join(formato))
        
        # Cargar otros valores
        self.start_row_var.set(config.get("start_row", 0))
        self.font_size_var.set(config.get("vista_previa_fuente", 10))
        
        # Configuraci√≥n espec√≠fica de Urbano
        if self.current_mode == "urbano":
            digitos = config.get("nombre_archivo_digitos", [9, 10])
            self.digitos_var.set(",".join(map(str, digitos)))
    
    def _update_preview(self):
        """Actualizar vista previa"""
        config = self.config_data.get(self.current_mode, {})
        
        eliminar_count = len(config.get("eliminar", []))
        sumar_count = len(config.get("sumar", []))
        formato_count = len(config.get("mantener_formato", []))
        
        preview_content = f'''
üß¨ Configuraci√≥n Actual:

üìä Modo: {self.current_mode.upper()}
üìç Fila inicio: {self.start_row_var.get()}
üóëÔ∏è Columnas a eliminar: {eliminar_count}
‚ûï Columnas a sumar: {sumar_count}
üîí Mantener formato: {formato_count}
üî§ Tama√±o fuente: {self.font_size_var.get()}

‚úÖ La configuraci√≥n se aplicar√° autom√°ticamente
   al procesar archivos en este modo.
        '''
        
        self.preview_text.config(state="normal")
        self.preview_text.delete("1.0", tk.END)
        self.preview_text.insert("1.0", preview_content)
        self.preview_text.config(state="disabled")
    
    def _reset_to_default(self):
        """Restablecer configuraci√≥n por defecto"""
        if messagebox.askyesno(
            "Restablecer",
            f"¬øRestablecer la configuraci√≥n por defecto para el modo {self.current_mode.upper()}?"
        ):
            # Recargar configuraci√≥n por defecto
            default_config = self._load_config()
            self.config_data[self.current_mode] = default_config[self.current_mode]
            self._load_current_config()
            self._update_preview()
    
    def _copy_config(self):
        """Copiar configuraci√≥n al portapapeles"""
        config = self.config_data.get(self.current_mode, {})
        config_text = json.dumps(config, indent=2, ensure_ascii=False)
        
        self.clipboard_clear()
        self.clipboard_append(config_text)
        
        messagebox.showinfo(
            "Configuraci√≥n Copiada",
            "La configuraci√≥n ha sido copiada al portapapeles."
        )
    
    def _save_and_close(self):
        """Guardar configuraci√≥n y cerrar ventana"""
        try:
            # Obtener valores de los campos
            eliminar = [
                line.strip() for line in self.eliminar_text.get("1.0", tk.END).split("\n")
                if line.strip()
            ]
            
            sumar = [
                line.strip() for line in self.sumar_text.get("1.0", tk.END).split("\n")
                if line.strip()
            ]
            
            formato = [
                line.strip() for line in self.formato_text.get("1.0", tk.END).split("\n")
                if line.strip()
            ]
            
            # Actualizar configuraci√≥n
            self.config_data[self.current_mode] = {
                "eliminar": eliminar,
                "sumar": sumar,
                "mantener_formato": formato,
                "start_row": self.start_row_var.get(),
                "vista_previa_fuente": self.font_size_var.get(),
            }
            
            # Configuraci√≥n espec√≠fica de Urbano
            if self.current_mode == "urbano":
                try:
                    digitos_str = self.digitos_var.get().strip()
                    if digitos_str:
                        digitos = [int(d.strip()) for d in digitos_str.split(",") if d.strip().isdigit()]
                    else:
                        digitos = [9, 10]
                    self.config_data[self.current_mode]["nombre_archivo_digitos"] = digitos
                except:
                    self.config_data[self.current_mode]["nombre_archivo_digitos"] = [9, 10]
            
            # Guardar configuraci√≥n
            self._save_config()
            
            messagebox.showinfo(
                "Configuraci√≥n Guardada",
                f"La configuraci√≥n para el modo {self.current_mode.upper()} ha sido guardada correctamente."
            )
            
            self.destroy()
            
        except Exception as e:
            messagebox.showerror(
                "Error",
                f"Error al guardar la configuraci√≥n:\n{e}"
            )

